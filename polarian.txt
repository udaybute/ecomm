import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class JTableExample extends JFrame {
    private JTable table;
    private JTextField searchField;
    private JButton searchButton;
    private JButton addButton;

    public JTableExample() {
        setTitle("JTable Example");
        setSize(500, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Create a table model with dummy data
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) {
                    return Boolean.class; // Use Boolean class for "Select" column
                }
                return super.getColumnClass(columnIndex);
            }
        };
        model.addColumn("Select");
        model.addColumn("Name");
        model.addColumn("Age");

        // Add dummy data to the table
        List<Object[]> data = new ArrayList<>();
        data.add(new Object[]{false, "John Doe", 25});
        data.add(new Object[]{false, "Jane Smith", 30});
        data.add(new Object[]{false, "Mike Johnson", 35});

        for (Object[] row : data) {
            model.addRow(row);
        }

        // Create the JTable with the custom model
        table = new JTable(model);
        table.getColumnModel().getColumn(0).setCellRenderer(new RadioButtonRenderer());
        table.getColumnModel().getColumn(0).setCellEditor(new RadioButtonEditor());

        // Create the search field and search button
        searchField = new JTextField(20);
        searchButton = new JButton("Search");

        // Create the add button
        addButton = new JButton("Add");

        // Create a panel for the search components
        JPanel searchPanel = new JPanel();
        searchPanel.add(new JLabel("Search:"));
        searchPanel.add(searchField);
        searchPanel.add(searchButton);
        searchPanel.add(addButton);

        // Add the search panel and table to the frame
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(searchPanel, BorderLayout.NORTH);
        getContentPane().add(new JScrollPane(table), BorderLayout.CENTER);

        // Add action listeners for the search button and add button
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String searchText = searchField.getText();
                searchTable(searchText);
            }
        });

        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Perform the action when the add button is clicked
                // For example, add a new row to the table
                model.addRow(new Object[]{false, "New Person", 0});
            }
        });
    }

    private void searchTable(String searchText) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        table.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter(searchText));
    }

    private class RadioButtonRenderer implements TableCellRenderer {
        private final JRadioButton radioButton;

        public RadioButtonRenderer() {
            radioButton = new JRadioButton();
            radioButton.setHorizontalAlignment(SwingConstants.CENTER);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            radioButton.setSelected(Objects.equals(value, true));
            return radioButton;
        }
    }

    private class RadioButtonEditor extends DefaultCellEditor {
        private final JRadioButton radioButton;

        public RadioButtonEditor() {
            super(new JCheckBox());
            radioButton = new JRadioButton();
            radioButton.setHorizontalAlignment(SwingConstants.CENTER);
            radioButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped();
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            radioButton.setSelected(Objects.equals(value, true));
            return radioButton;
        }

        @Override
        public Object getCellEditorValue() {
            return radioButton.isSelected();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                JTableExample example = new JTableExample();
                example.setVisible(true);
            }
        });
    }
}
