import java.io.File;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.IOUtils;
import org.json.JSONArray;
import org.json.JSONObject;

public class AttachmentUploader {
    
    public List<Attachment> addWorkItemAttachments(Core_DataEntitiy data, List<File> attachments, String workItemId) {
        List<Attachment> attachmentsList = new ArrayList<>();
        
        Map<String, String> details = data.getValues();
        try {
            String inputJson = "{\n" +
                    "  \"data\": [\n";
            String workItemAttachments = "";
            int attachmentsCount = attachments.size();
            
            MultipartEntityBuilder builder = MultipartEntityBuilder.create();
            
            for (File file : attachments) {
                attachmentsCount--;
                
                workItemAttachments += "    {\n" +
                        "      \"type\": \"workitem_attachments\",\n" +
                        "      \"attributes\": {\n" +
                        "        \"fileName\": \"" + file.getName() + "\",\n" +
                        "        \"title\": \"" + file.getName() + "\"\n" +
                        "      }\n" +
                        "    }";
                
                if (attachmentsCount == 0) {
                    workItemAttachments += "\n";
                } else {
                    workItemAttachments += ",\n";
                }
                
                builder.addBinaryBody(file.getName(), file, ContentType.APPLICATION_OCTET_STREAM, file.getName());
            }
            
            inputJson += workItemAttachments + "  ]\n" +
                    "}";
            
            builder.addTextBody("data", inputJson, ContentType.APPLICATION_JSON);
            HttpEntity multipart = builder.build();
            CloseableHttpClient client = HttpClients.createDefault();
            
            String uri = details.get(ApplicationConstant.TARGET_URL) + RestServiceConstants.REST_URI + "/projects/"
                    + details.get(ApplicationConstant.PROJECT_ID) + "/workitems/" + workItemId + "/attachments";
            
            HttpPost httpPost = new HttpPost(uri);
            httpPost.setEntity(multipart);
            httpPost.setHeader("Content-type", "multipart/form-data");
            httpPost.setHeader("Accept", "application/json");
            httpPost.setHeader("Authorization",
                    RestServiceConstants.REST_AUTH_BEARER + details.get(ApplicationConstant.TOKEN));
            CloseableHttpResponse response = client.execute(httpPost);
            
            if (response.getStatusLine().getStatusCode() == 201) {
                String content = IOUtils.toString(response.getEntity().getContent());
                JSONObject obj = new JSONObject(content);
                
                if (obj.length() > 1) {
                    if (obj.has("data")) {
                        JSONArray jsonArray = obj.getJSONArray("data");
                        
                        for (int i = 0; i < jsonArray.length(); i++) {
                            JSONObject attachmentObject = jsonArray.getJSONObject(i);
                            if (attachmentObject.has("id")) {
                                String id = attachmentObject.getString("id");
                                Attachment attachment = new Attachment();
                                attachment.setId(id);
                                attachmentsList.add(attachment);
                            }
                        }
                    }
                }
            } else {
                JSONObject obj = new JSONObject(IOUtils.toString(response.getEntity().getContent()));
                
                if (obj.has("errors")) {
                    JSONArray jsonArray = obj.getJSONArray("errors");
                    
                    for (int i = 0; i < jsonArray.length(); i++) {
                        JSONObject errorObject = jsonArray.getJSONObject(i);
                        if (errorObject.has("detail")) {
                            String error = errorObject.getString("detail");
                            System.out.println("Error occurred while adding work item's attachment by ID\nStatus Code: " +
                                    response.getStatusLine().getStatusCode() + "\nDetails: " + error);
                        }
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        return attachmentsList;
    }
}

public class Attachment {
    private String id;
    // Other attributes and getters/setters
    
    public String getId() {
        return id;
    }
    
    public void setId(String id) {
        this.id = id;
    }
}
